name: Build and release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version for manual release"
        required: true
        default: "v1.0.0"
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

     
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod tidy

      # Setup InnoSetup
      - name: Install InnoSetup
        run: |
          choco install innosetup --no-progress --yes
     
     

      - name: Build Main Service Executable
        run: go build -o NITRINOnetControlManager.exe ./service

      - name: Build Remove Service Executable
        run: go build -o remove_service.exe ./uninstall


      - name: Build InnoSetup Installer
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" simple_install.iss
        shell: cmd



      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: NITRINOnetControlManagerSetup
          path: NITRINOnetControlManagerSetup.exe

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            
            NITRINOnetControlManagerSetup.exe

        env:
          GITHUB_TOKEN: ${{ secrets.GO_TOKEN }}

      - name: CleanUp Artifacts
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            for (const artifact of response.data.artifacts) {
              if (artifact.name === 'NITRINOnetControlManagerSetup') {
                console.log('Deleting artifact:', artifact.name);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }
        

